name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

# Global environment variables
env:
  NODE_VERSION: '18'

jobs:
  # Fast validation jobs that can run in parallel
  type-check:
    name: Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Type checking
        run: npm run type-check

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Lint code
        run: npm run lint

  format:
    name: Check Formatting
    runs-on: ubuntu-latest
    timeout-minutes: 3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Check code formatting
        run: npm run format

  # Security audit (can run in parallel with other jobs)
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run security audit
        run: npm audit --audit-level=moderate --production

      - name: Check for outdated dependencies
        run: npm outdated || true

  # Build and test (depends on fast validations)
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: [type-check, lint, format]
    timeout-minutes: 15

    strategy:
      matrix:
        node-version: [18, 20]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build project
        run: npm run build

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        if: success() && matrix.node-version == 18
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Lint staged files (only for PRs)
  lint-staged:
    name: Lint Staged Files
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v42
        with:
          files: |
            **/*.{ts,tsx}
            **/*.{json,md,yml,yaml}

      - name: Run lint-staged on changed files
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          npx lint-staged --verbose
        env:
          CI: true

  # Build artifacts (only for main branch)
  build-artifacts:
    name: Build Artifacts
    runs-on: ubuntu-latest
    needs: [build-and-test, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build project
        run: npm run build

      - name: Create release artifacts
        run: |
          # Verify build output exists
          ls -la dist/

          # Copy manifest to dist (it should already be there from build)
          cp manifest.json dist/ 2>/dev/null || true

          # Copy assets if they exist
          cp -r assets dist/ 2>/dev/null || true

          # List final artifacts
          echo "Final artifacts in dist/:"
          ls -la dist/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: timeline-writer-build
          path: dist/
          retention-days: 30
